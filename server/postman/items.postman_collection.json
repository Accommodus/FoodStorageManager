{
  "info": {
    "_postman_id": "98c142ab-8960-4b1b-9796-4b2d4e6d4c6f",
    "name": "Inventory Items",
    "description": "Regression tests for inventory item routes. Configure {{baseUrl}} to match the API origin. For create-item happy path tests, set {{locationId}} to an existing Mongo ObjectId tied to a Location document.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET /items",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/items",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "items"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('responds with HTTP 200', function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('content-type is JSON', function () {",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "pm.test('body is valid JSON object', function () {",
              "  const body = pm.response.json();",
              "  pm.expect(body).to.be.an('object');",
              "});",
              "",
              "const payload = pm.response.json();",
              "",
              "pm.test('payload contains data.items array', function () {",
              "  pm.expect(payload).to.have.property('data');",
              "  pm.expect(payload.data).to.have.property('items');",
              "  pm.expect(payload.data.items).to.be.an('array');",
              "});",
              "",
              "pm.test('items have expected shape', function () {",
              "  const items = payload.data.items;",
              "  items.forEach((item, index) => {",
              "    pm.expect(item, `item at index ${index}`).to.be.an('object');",
              "    pm.expect(item).to.have.property('_id').that.is.a('string').and.not.empty;",
              "    pm.expect(item).to.have.property('name').that.is.a('string').and.not.empty;",
              "    pm.expect(item).to.have.property('locationId').that.is.a('string').and.not.empty;",
              "    if (Object.prototype.hasOwnProperty.call(item, 'expiresAt') && item.expiresAt !== undefined) {",
              "      pm.expect(item.expiresAt).to.satisfy((value) => {",
              "        if (value === null) {",
              "          return true;",
              "        }",
              "        const parsed = Date.parse(value);",
              "        return !Number.isNaN(parsed);",
              "      }, 'expiresAt must be an ISO date string or null');",
              "    }",
              "  });",
              "});",
              "",
              "pm.test('server does not return HTML', function () {",
              "  pm.expect(pm.response.text()).to.not.match(/^<!doctype html>/i);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET /items with invalid locationId",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/items?locationId=not-a-valid-object-id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "items"
          ],
          "query": [
            {
              "key": "locationId",
              "value": "not-a-valid-object-id"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('responds with HTTP 400', function () {",
              "  pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('content-type is JSON', function () {",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "const payload = pm.response.json();",
              "",
              "pm.test('error payload matches schema', function () {",
              "  pm.expect(payload).to.have.property('error');",
              "  pm.expect(payload.error).to.have.property('message').that.is.a('string').and.not.empty;",
              "  pm.expect(payload.error).to.have.property('issues');",
              "});",
              "",
              "pm.test('issues include locationId hint', function () {",
              "  pm.expect(payload.error.issues).to.have.property('locationId');",
              "});",
              "",
              "pm.test('server does not return HTML', function () {",
              "  pm.expect(pm.response.text()).to.not.match(/^<!doctype html>/i);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /items - missing body",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/items",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "items"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('responds with HTTP 400 when body missing', function () {",
              "  pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('content-type is JSON', function () {",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "const payload = pm.response.json();",
              "",
              "pm.test('error payload includes message', function () {",
              "  pm.expect(payload).to.have.property('error');",
              "  pm.expect(payload.error).to.have.property('message').that.is.a('string').and.not.empty;",
              "});",
              "",
              "pm.test('issues object is present when available', function () {",
              "  if (Object.prototype.hasOwnProperty.call(payload.error, 'issues')) {",
              "    pm.expect(payload.error.issues).to.be.an('object');",
              "  }",
              "});",
              "",
              "pm.test('server does not return HTML', function () {",
              "  pm.expect(pm.response.text()).to.not.match(/^<!doctype html>/i);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /items - invalid locationId",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"item\": {\n    \"name\": \"Invalid Location Item\",\n    \"locationId\": \"not-a-valid-object-id\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/items",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "items"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('responds with HTTP 400 when locationId invalid', function () {",
              "  pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('content-type is JSON', function () {",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "const payload = pm.response.json();",
              "",
              "pm.test('error payload includes message and issues when present', function () {",
              "  pm.expect(payload).to.have.property('error');",
              "  pm.expect(payload.error).to.have.property('message').that.is.a('string').and.not.empty;",
              "  if (Object.prototype.hasOwnProperty.call(payload.error, 'issues')) {",
              "    pm.expect(payload.error.issues).to.be.an('object');",
              "  }",
              "});",
              "",
              "pm.test('server does not return HTML', function () {",
              "  pm.expect(pm.response.text()).to.not.match(/^<!doctype html>/i);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /items - create item (requires locationId)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"item\": {\n    \"name\": \"Sample Inventory Item\",\n    \"locationId\": \"{{locationId}}\",\n    \"unit\": \"ea\",\n    \"caseSize\": 6\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/items",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "items"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const locationId = pm.variables.get('locationId');",
              "",
              "if (!locationId || !locationId.trim()) {",
              "  console.warn('Skipping create-item assertions: set collection/environment variable \"locationId\" to a valid Location ObjectId.');",
              "  pm.test('skip create-item when locationId not configured', function () {",
              "    pm.expect(true).to.be.true;",
              "  });",
              "  return;",
              "}",
              "",
              "pm.test('responds with HTTP 201 when item is created', function () {",
              "  pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('content-type is JSON', function () {",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "const payload = pm.response.json();",
              "",
              "pm.test('response includes created item with expected fields', function () {",
              "  pm.expect(payload).to.have.property('data');",
              "  pm.expect(payload.data).to.have.property('item');",
              "  const item = payload.data.item;",
              "  pm.expect(item).to.have.property('_id').that.is.a('string').and.not.empty;",
              "  pm.expect(item).to.have.property('name', 'Sample Inventory Item');",
              "  pm.expect(item).to.have.property('locationId', locationId);",
              "});",
              "",
              "pm.test('server does not return HTML', function () {",
              "  pm.expect(pm.response.text()).to.not.match(/^<!doctype html>/i);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST /item alias - invalid payload",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"item\": {\n    \"name\": \"Alias Route\",\n    \"locationId\": \"\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/item",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "item"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('alias route still validates input', function () {",
              "  pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('content-type is JSON', function () {",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "const payload = pm.response.json();",
              "",
              "pm.test('error payload surfaced for alias route', function () {",
              "  pm.expect(payload).to.have.property('error');",
              "  pm.expect(payload.error).to.have.property('message').that.is.a('string').and.not.empty;",
              "});",
              "",
              "pm.test('server does not return HTML', function () {",
              "  pm.expect(pm.response.text()).to.not.match(/^<!doctype html>/i);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "locationId",
      "value": ""
    }
  ]
}
